前言
编程两年有余，得益于网上各位仁人志士的无私分享，学到了很多。自己也积累了一些经验与心得体会，遂萌生了回报社会的想法。
自己也是在网上从完全不会编程到会，希望这些文章能帮到完全不会编程的零基础小白，让他们少走一些弯路。
这些文章的目的不是教会你们任何一门具体的编程语言(例如js,java),而是力求提取出所有编程语言的共性——即编程的本质。
这个网站采用的技术是react和单页，遵从极简主义原则——一切不必要的css,都将被我省去。
变量和函数
变量是什么
变量几乎是编程里最重要也最基础的一个概念，任何开始接触编程的人，首先要做的就是理解变量的概念。
现实生活中，我们几乎不会在日常用语里说到变量这两个字，但变量却几乎可以说是每天都存在于我们的
日常生活里。例如，买彩票的结果，中与不中便是一个变量，和女生表白，答不答应也是一个变量。可以看到，
上述变量只有两个取值：肯定或者否定，假或者真。现实生活中，充斥着大量这样的二元变量，而编程是为现实
生活服务的，因此，在这里我们自然而然的要引出编程里另外一个关键的概念——判断:if。当你掌握了变量和判断
的概念后，恭喜你，你已经可以写出一段简单的程序了！例如，拿我们通常的登录操作来说，写成程序一般是这样的：
if(密码正确)
	登录成功
else	
	密码错误
注意到密码的正确与否是一个变量，所以我们通常会这么做：变量=密码，然后这么写：
if(变量正确)
	登录成功
else	
	密码错误
但是，我们通常不会只有一个变量，例如登录操作还会有账户，而且你直接写成变量别说别人，你自己久了看到都不知道那是
什么意思，所以我们会这么定义一个密码变量：password,上面的程序改为：
if(password正确)
	登录成功
else	
	密码错误
看吧，是不是一目了然了！那么，细心的同学可能发现了，我们怎么知道密码正不正确呢？这里自然而然地就要引出数据库的概念。
数据库，顾名思义，就是存放数据的地方。所以，上面的程序便改为：
if(password等于数据库里的密码)
	登录成功
else	
	密码错误
有没有觉得"数据库里的密码"太长了呢？如果我们要在一段程序里多次用到，那简直绝望，所以我们用psd来代替，改为：	
if(password等于psd)
	登录成功
else	
	密码错误
然后，编程里的等于判断我们会写成"==",改为：
if(password==psd)
	登录成功
else	
	密码错误
看起来是不是有模有样了！恭喜你，看到这里，你已经比那些完全不会编程的人更懂编程了！	
为什么需要变量
简单说来就是生活中存在着各种可能，例如你可能输错秘密，也可能忘记秘密，种种的可能，使得为生活服务的编程必不可少变量。
变量的用途
上面说到了，变量可以用来判断，但其实这不是在编程里最重要的用法，变量最主要的用法是用在函数中，而这也将引出编程里最
重要的一个概念：函数。
一提到函数，人们首先想到的是数学里的f(x)，编程里函数的概念基本上和数学上是一样的，仔细观察上面判断密码是否正确的程序
if(password==psd)
	登录成功
else	
	密码错误
我们惊讶和惊喜的发现，这段程序里，只有password和psd是不确定的，其它都是不变的(除非中国以后变为超级强国，强制全世界中文
编程，硬要把if改为如果),所以，我们可以定义一个这么判断密码是否正确的函数：
函数 判断密码是否正确(变量 password,变量 psd){
	if(password==psd)
		登录成功
	else	
		密码错误
}
我们这里使用大括号{}把判断的程序包裹起来，是为了区别其它不属于这个函数的程序。以后，我们再需要判断用户输入的密码是否正确
时，就不再需要写一大堆了，而是直接调用判断密码是否正确这个函数，然后把变量输入进去就行了，例如：
调用 判断密码是否正确(用户输入的值，数据库里的值)。
通常我们用function来定义一个函数，判断密码是否正确可以写为password_is_true,则改为：
function password_is_true(password,psd){
	if(password==psd)
		登录成功
	else	
		密码错误
}
调用则不用上前面加function,直接password_is_true(用户输入的值 password,数据库里的值 psd)即可。
这便是编程里通常意义上的函数了。关于函数，我们当然还有许多要说的，但我想先总结一下前面写的。
我们前面说到，"数据库里的密码"这几个字太长了，所以我们用psd代替，判断密码的程序有4行，所以我们把它
写在一个程序里，以后直接调用就行，一行顶四行。那么，还有没有更高级的抽象呢？我认为是没了。一些编程里通常还有'类'的概念，简单
来讲，就是把几个操作对象相同的函数放在一起，例如我们可以定义一个用户类，里面有判断登录的函数，也有判断用户是否为vip的函数。但
总的来说，这和上面减少代码量的抽象是有本质的区别的——看起来更像是易于维护和分类函数。但其实我觉得把几个操作对象相同的函数写在一个文件
里就行，无需再用上类。怪不得c语言之父经常抨击c++这种有类的语言，也可能是我才疏学浅吧。
函数没那么简单
让我们回到函数上面来，上面所提到的判断密码的函数，可以说是最为简单和常见的一种函数了——我们知道要判断密码，但我们不知道密码是否正确。
有没有可能，我们已经知道了密码是否正确，但我们不知道要做什么呢！这时候，一种有趣的转换发生了：变量变为常量，常量变为变量！所幸的是，
绝大多数编程语言确实能够做到这点。
例如，在用户选注册登录成功后，我们有时会选择发短信告诉用户密码，有时会选择邮箱，更要命的是我们不知道因为还会出现什么新的工具，所以
我们做不到事先写好告诉用户密码的函数，但我们可以确定的是这个密码，所以我们可以尝试着把上面的函数改为：
function password_is_true(password,psd,tell){
	if(password==psd)
		登录成功
		tell(password)
	else	
		密码错误
}
这里多了一个tell参数，并且我们再函数里看到这个tell竟然也是一个函数！因此，在调用时，我们可以：
password_is_true(password,psd,function(password){
	做你任何想做的事，发送password到手机或者邮箱。
})
这个在函数调用时才写的函数通常被人们称之为回调函数或者匿名函数。称之为什么并不重要，重要的是，从中我们可以领悟的到，常量和变量
是相对的，我们只有牢牢把握住本质的变量，才能写出好的程序。能否抓住本质的变量，是一个程序员水平高低最本质的体现。
函数的递归
